#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ Shopify –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º üåç

–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ:
- total_sales: —Å—É–º–º–∞ total –ø–æ —Å—Ç—Ä–∞–Ω–µ üíµ
- items_sold: —Å—É–º–º–∞ quantity (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤) –ø–æ —Å—Ç—Ä–∞–Ω–µ üì¶

–°–æ—Ö—Ä–∞–Ω—è–µ—Ç CSV —Å —Ç–æ–ø-10 —Å—Ç—Ä–∞–Ω –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é HTML-–¥–∏–∞–≥—Ä–∞–º–º—É (Plotly) üìà
"""

from __future__ import annotations

import argparse
import logging
from dataclasses import dataclass
from pathlib import Path
from typing import List

import pandas as pd
import plotly.express as px


LOGS_DIR = Path("/home/codefather/Documents/ai_project_template/ai_project_template/excel_to_csv/logs")
DATA_IN = Path("/home/codefather/Documents/ai_project_template/ai_project_template/excel_to_csv/data_in/shopify_orders_20250929_202605.xlsx")
DATA_OUT_CSV = Path("/home/codefather/Documents/ai_project_template/ai_project_template/excel_to_csv/data_out/shopify_orders_20250929_202605.csv")
DATA_OUT_HTML = Path("/home/codefather/Documents/ai_project_template/ai_project_template/excel_to_csv/data_out/diagram.html")


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å üòÄ"""
    LOGS_DIR.mkdir(parents=True, exist_ok=True)
    log_file = LOGS_DIR / "run.log"
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(log_file, encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )


@dataclass
class ProcessingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ üìã"""

    country_column: str = "shipping_country"
    total_column: str = "total"
    quantity_column: str = "quantity"
    fulfillment_column: str = "fulfillment_status"
    fulfilled_value: str = "fulfilled"
    top_n: int = 10


REQUIRED_COLUMNS: List[str] = [
    "order_id",
    "shipping_country",
    "quantity",
    "total",
    "fulfillment_status",
]


def validate_columns(df: pd.DataFrame) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ‚úÖ"""
    missing = [c for c in REQUIRED_COLUMNS if c not in df.columns]
    if missing:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")


def load_data(path: Path) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ üì•"""
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ Excel: %s", path)
    df = pd.read_excel(path)
    logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d, —Å—Ç–æ–ª–±—Ü–æ–≤: %d", df.shape[0], df.shape[1])
    return df


def filter_fulfilled(df: pd.DataFrame, cfg: ProcessingConfig) -> pd.DataFrame:
    """–û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã üöö"""
    if cfg.fulfillment_column not in df.columns:
        logging.warning("–ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: %s", cfg.fulfillment_column)
        return df
    filtered = df[df[cfg.fulfillment_column].astype(str).str.lower() == cfg.fulfilled_value]
    logging.info("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ fulfilled: %d —Å—Ç—Ä–æ–∫", filtered.shape[0])
    return filtered


def aggregate_by_country(df: pd.DataFrame, cfg: ProcessingConfig) -> pd.DataFrame:
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–µ: —Å—É–º–º–∞ total –∏ —Å—É–º–º–∞ quantity üßÆ"""
    # –†–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ø–∏–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å SettingWithCopyWarning
    df = df.copy()
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
    for col in [cfg.total_column, cfg.quantity_column]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

    grouped = (
        df.groupby(cfg.country_column, dropna=False)
        .agg(total_sales=(cfg.total_column, "sum"), items_sold=(cfg.quantity_column, "sum"))
        .reset_index()
    )
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ total_sales desc, items_sold desc, –∑–∞—Ç–µ–º —Å—Ç—Ä–∞–Ω–∞
    grouped = grouped.sort_values(
        by=["total_sales", "items_sold", cfg.country_column],
        ascending=[False, False, True],
        kind="mergesort",
    )
    logging.info("–°—Ç—Ä–∞–Ω –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %d", grouped.shape[0])
    return grouped


def top_n_countries(df: pd.DataFrame, cfg: ProcessingConfig) -> pd.DataFrame:
    """–í–∑—è—Ç—å —Ç–æ–ø-N —Å—Ç—Ä–∞–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º üèÜ"""
    return df.head(cfg.top_n).copy()


def save_csv(df: pd.DataFrame, path: Path) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV üíæ"""
    path.parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(path, index=False)
    logging.info("CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", path)


def save_plot_html(df: pd.DataFrame, path: Path) -> None:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ HTML üé®"""
    path.parent.mkdir(parents=True, exist_ok=True)
    title_text = "–¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ (USD) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
    fig = px.bar(
        df,
        x="shipping_country",
        y="total_sales",
        hover_data={"items_sold": True, "total_sales": ":.2f"},
        text="items_sold",
        title=title_text,
        color="total_sales",
        color_continuous_scale="Blues",
    )
    fig.update_traces(textposition="outside")
    fig.update_layout(
        xaxis_title="–°—Ç—Ä–∞–Ω–∞",
        yaxis_title="–í—ã—Ä—É—á–∫–∞, USD",
        template="plotly_white",
        uniformtext_minsize=10,
        uniformtext_mode="hide",
    )
    # –í—Å—Ç–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ HTML, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    div_html = fig.to_html(include_plotlyjs="cdn", full_html=False)
    page_html = (
        "<html>\n"
        "<head><meta charset=\"utf-8\" /><title>" + title_text + "</title></head>\n"
        "<body>\n"
        "<h1>" + title_text + "</h1>\n"
        + div_html +
        "\n</body>\n</html>"
    )
    path.write_text(page_html, encoding="utf-8")
    logging.info("HTML –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: %s", path)


def process(cfg: ProcessingConfig, input_path: Path, out_csv: Path, out_html: Path) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ üîÑ"""
    df = load_data(input_path)
    validate_columns(df)
    df = filter_fulfilled(df, cfg)
    agg = aggregate_by_country(df, cfg)
    top = top_n_countries(agg, cfg)
    save_csv(top, out_csv)
    save_plot_html(top, out_html)


def parse_args() -> argparse.Namespace:
    """–†–∞–∑–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ üîß"""
    parser = argparse.ArgumentParser(description="Process Shopify orders by country")
    parser.add_argument("--input", type=str, default=str(DATA_IN), help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É Excel")
    parser.add_argument("--out_csv", type=str, default=str(DATA_OUT_CSV), help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV")
    parser.add_argument("--out_html", type=str, default=str(DATA_OUT_HTML), help="–ü—É—Ç—å –∫ HTML –¥–∏–∞–≥—Ä–∞–º–º–µ")
    return parser.parse_args()


def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ üöÄ"""
    setup_logging()
    args = parse_args()
    cfg = ProcessingConfig()
    try:
        process(cfg, Path(args.input), Path(args.out_csv), Path(args.out_html))
        logging.info("–ì–æ—Ç–æ–≤–æ! ‚úÖ")
    except Exception as exc:  # noqa: BLE001
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s", exc)
        raise


if __name__ == "__main__":
    main()


